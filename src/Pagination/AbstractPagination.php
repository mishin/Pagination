<?php/* * This file is part of the UCSDMath package. * * (c) UCSD Mathematics | Math Computing Support <mathhelp@math.ucsd.edu> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */namespace UCSDMath\Pagination;use Carbon\Carbon;use UCSDMath\Functions\ServiceFunctions;use UCSDMath\Pagination\PaginatorInterface;use UCSDMath\Functions\ServiceFunctionsInterface;/** * AbstractPagination provides an abstract base class implementation of {@link PaginationInterface}. * Primarily, this services the fundamental implementations for all Pagination classes. * * Paginator provides a process of dividing (content) into discrete pages that are * acceptable or desirable to the user. * * Important considerations in this class are: *    - SEO Friendly URLS *    - Dynamic search results (sticky or hold state) *    - Standard scheme for Front Controllers *    - Provide options for template generator (e.g., Twig, Plates, Smarty) *    - Provided via data structure * * Technically, for pagination to work, all is needed is the page number of the current set. * *    $page = filter_input(INPUT_GET, 'page', FILTER_VALIDATE_INT); *    $items_per_page = 4; * * *    $total_items = "SELECT COUNT(*) FROM personnel; *    $row_count   = "SELECT COUNT(*) FROM personnel where group = 'faculty'; * *    if ($total_items === 0) { print 'No records exist in the database.';} *    if ($row_count === 0)   { print 'No records found in database with you exact match.';} * * *    $page_count = (int) ceil($row_count / $items_per_page); * *    // range error; we could just set page = 1 *    if ($page > $page_count) {$page = 1;} * * *    $offset = ($page - 1) * $items_per_page; *    $sql = "SELECT * FROM personnel where (group = 'faculty') (ORDER BY lastname, firstname) LIMIT " . $offset . "," . $items_per_page; * *    Result: SELECT * FROM personnel LIMIT 4,4 * * Examples of useful url patterns: *    - /sso/1/personnel/(:page)/(:rows)/(:sort)/ *    - /sso/1/personnel/quick-search/(:page)/(:rows)/(:search)/(:sort)/ *    - /sso/1/personnel/edit-search/page-(:page)/show-(:rows)/(:search)/(:sort)/ *    - /sso/1/personnel/edit-record/page-(:page)/ * * Method list: * * @see (+) __construct(); * @see (+) __destruct(); * @see (*) __toString(); * @see (+) setMaxPagesToShow($maxPagesToShow); * @see (+) getMaxPagesToShow(); * @see (+) setItemsPerPage($itemsPerPage); * @see (+) getItemsPerPage(); * @see (+) setCurrentPage($currentPage); * @see (+) getCurrentPage(); * @see (+) setUrlPattern($urlPattern); * @see (+) getUrlPattern(); * @see (+) setTotalItems($totalItems); * @see (+) getTotalItems(); * @see (+) getCurrentPageFirstItem(); * @see (+) getCurrentPageLastItem(); * @see (+) getPageUrl($pageNum); * @see (+) getNumPages(); * @see (+) getNextPage(); * @see (+) getPrevPage(); * @see (+) getNextUrl(); * @see (+) getPrevUrl(); * @see (+) renderAsArray(); * @see (-) createPageEllipsis(); * @see (+) getDefaultHtml(); * @see (+) getSmallHtml(); * @see (-) setPageCount(); * @see (-) createPage($pageNum, $isCurrent = false); * * @author Daryl Eisner <deisner@ucsd.edu> */abstract class AbstractPagination implements PaginationInterface, ServiceFunctionsInterface{    /**     * Constants.     */    const VERSION = '1.0.5';    /**     * Properties.     *     * @var    integer             $pageCount            A number of pages to render (e.g., a calculation) (e.g., 521)     * @var    integer             $totalItems           A total number of found records in table (e.g., 5000)     * @var    integer             $currentPage          A current page number (e.g., 8)     * @var    integer             $itemsPerPage         A display setting of records per page (e.g., 50)     * @var    integer             $maxPagesToShow       A maximum number of pages for <select> menu (e.g., 10)     * @var    string              $urlPattern           A default url pattern with placeholder (:num) (e.g., '/sso/1/course-petitions/(:num)')     * @var    string              $sortPattern          A default sort pattern that uses url pattern (:sort) (e.g., 'lastname-firstname')     * @var    string              $searchPattern        A default search pattern that uses url pattern (:search) (e.g., 'dillon-and-drop-2016')     * @var    boolean             $isUrlPatternUsed     A boolean option that enables the pattern used     * @var    boolean             $isSortPatternUsed    A boolean option that enables the pattern used     * @var    boolean             $isItemsPerPageUsed   A boolean option that enables the pattern used     * @var    boolean             $isSearchPatternUsed  A boolean option that enables the pattern used     * @var    array               $storageRegister      A set of validation stored data elements     * @static PaginationInterface $instance             A PaginationInterface instance     * @static integer             $objectCount          A PaginationInterface instance count     */    protected $pageCount = null;    protected $totalItems = null;    protected $pageOffset = null;    protected $currentPage = null;    protected $itemsPerPage = null;    protected $maxPagesToShow = 10;    protected $urlPattern = null;    protected $sortPattern = null;    protected $searchPattern = null;    protected $isUrlPatternUsed = false;    protected $isSortPatternUsed = false;    protected $isItemsPerPageUsed = false;    protected $isSearchPatternUsed = false;    protected $storageRegister = array();    protected static $instance = null;    protected static $objectCount = 0;    /**     * Constructor.     *     * @param array $settings  A list of page settings.     *     * @api     */    public function __construct(array $settings = null, array $options = array())    {        /**         * Adding array_key_exists() to handle the null cases while keeping the speed of isset()         * Benchmark: isset() = 4.7ms, array_key_exists() = 308ms.         * Array values of null are rare.         */        /* load defined integers */        isset($settings['totalItems']) || array_key_exists('totalItems', $settings)            ? $this->setProperty('totalItems', (int) $settings['totalItems'])            : null ;        isset($settings['itemsPerPage']) || array_key_exists('itemsPerPage', $settings)            ? $this->setProperty('itemsPerPage', (int) $settings['itemsPerPage'])            : null ;        isset($settings['currentPage']) || array_key_exists('currentPage', $settings)            ? $this->setProperty('currentPage', (int) $settings['currentPage'])            : null ;        isset($settings['maxPagesToShow']) || array_key_exists('maxPagesToShow', $settings)            ? $this->setProperty('maxPagesToShow', (int) $settings['maxPagesToShow'])            : null ;        /* load defined strings */        isset($settings['urlPattern']) || array_key_exists('urlPattern', $settings)            ? $this->setProperty('urlPattern', (string) $settings['urlPattern'])            : null ;        isset($settings['searchPattern']) || array_key_exists('searchPattern', $settings)            ? $this->setProperty('searchPattern', (string) $settings['searchPattern'])            : null ;        isset($settings['sortPattern']) || array_key_exists('sortPattern', $settings)            ? $this->setProperty('sortPattern', (string) $settings['sortPattern'])            : null ;        /* load defined Boolean */        isset($settings['isSearchPatternUsed']) || array_key_exists('isSearchPatternUsed', $settings)            ? $this->setProperty('isSearchPatternUsed', (bool) $settings['isSearchPatternUsed'])            : null ;        isset($settings['isSortPatternUsed']) || array_key_exists('isSortPatternUsed', $settings)            ? $this->setProperty('isSortPatternUsed', (bool) $settings['isSortPatternUsed'])            : null ;        isset($settings['isUrlPatternUsed']) || array_key_exists('isUrlPatternUsed', $settings)            ? $this->setProperty('isUrlPatternUsed', (bool) $settings['isUrlPatternUsed'])            : null ;        isset($settings['isItemsPerPageUsed']) || array_key_exists('isItemsPerPageUsed', $settings)            ? $this->setProperty('isItemsPerPageUsed', (bool) $settings['isItemsPerPageUsed'])            : null ;        if ($this->maxPagesToShow <= 3) {            throw new \LogicException('Number of neighboring pages must be at least 3');        }        if ($this->itemsPerPage <= 0) {            throw new \LogicException('Items per page must be at least 1');        }        if ($this->currentPage < static::DEFAULT_PAGE) {            $this->currentPage = static::DEFAULT_PAGE;        }        foreach ($options as $key => $value) {            $this->{$key} = $value;        }        $this->setPageCount();        $this->setCurrentPage();        static::$instance = $this;        static::$objectCount++;    }    /**     * Destructor.     */    public function __destruct()    {        static::$objectCount--;    }    /**     * Calculate the number of pages.     *     * @return bool     */    protected function setPageCount()    {        ((int) $this->itemsPerPage === 0)            ? $this->setProperty('pageCount', 0)            : $this->setProperty('pageCount', (int) ceil((int) $this->totalItems / (int) $this->itemsPerPage));        return $this;    }    /**     * Recalculates an updated settings parameter.     *     * @param array $settings  A list of page settings.     * @param array $options   A list of page options.     *     * @return PaginationInterface     *     * @throws \InvalidArgumentException if $settings is null.     *     * @api     */    public function recalculate(array $settings = null, array $options = array())    {        /* load defined integers */        isset($settings['totalItems']) || array_key_exists('totalItems', $settings)            ? $this->setProperty('totalItems', (int) $settings['totalItems'])            : null ;        isset($settings['itemsPerPage']) || array_key_exists('itemsPerPage', $settings)            ? $this->setProperty('itemsPerPage', (int) $settings['itemsPerPage'])            : null ;        isset($settings['currentPage']) || array_key_exists('currentPage', $settings)            ? $this->setProperty('currentPage', (int) $settings['currentPage'])            : null ;        isset($settings['maxPagesToShow']) || array_key_exists('maxPagesToShow', $settings)            ? $this->setProperty('maxPagesToShow', (int) $settings['maxPagesToShow'])            : null ;        /* load defined strings */        isset($settings['urlPattern']) || array_key_exists('urlPattern', $settings)            ? $this->setProperty('urlPattern', (string) $settings['urlPattern'])            : null ;        isset($settings['searchPattern']) || array_key_exists('searchPattern', $settings)            ? $this->setProperty('searchPattern', (string) $settings['searchPattern'])            : null ;        isset($settings['sortPattern']) || array_key_exists('sortPattern', $settings)            ? $this->setProperty('sortPattern', (string) $settings['sortPattern'])            : null ;        /* load defined Boolean */        isset($settings['isSearchPatternUsed']) || array_key_exists('isSearchPatternUsed', $settings)            ? $this->setProperty('isSearchPatternUsed', (bool) $settings['isSearchPatternUsed'])            : null ;        isset($settings['isSortPatternUsed']) || array_key_exists('isSortPatternUsed', $settings)            ? $this->setProperty('isSortPatternUsed', (bool) $settings['isSortPatternUsed'])            : null ;        isset($settings['isUrlPatternUsed']) || array_key_exists('isUrlPatternUsed', $settings)            ? $this->setProperty('isUrlPatternUsed', (bool) $settings['isUrlPatternUsed'])            : null ;        isset($settings['isItemsPerPageUsed']) || array_key_exists('isItemsPerPageUsed', $settings)            ? $this->setProperty('isItemsPerPageUsed', (bool) $settings['isItemsPerPageUsed'])            : null ;        if ($this->maxPagesToShow <= 3) {            throw new \LogicException('Number of neighboring pages must be at least 3');        }        if ($this->itemsPerPage <= 0) {            throw new \LogicException('Items per page must be at least 1');        }        if ($this->currentPage < static::DEFAULT_PAGE) {            $this->currentPage = static::DEFAULT_PAGE;        }        foreach ($options as $key => $value) {            $this->{$key} = $value;        }        $this->setPageCount();        $this->setCurrentPage();        return $this;    }    /**     * Get the calculated page count.     *     * @return integer     *     * @api     */    public function getPageCount()    {        return (int) $this->getProperty('pageCount');    }    /**     * Determine if the given value is a valid page number.     *     * @param  integer $page  A page number.     *     * @return Boolean     */    protected function isValidPageNumber($page)    {        return $page >= 1 && filter_var($page, FILTER_VALIDATE_INT) !== false;    }    /**     * Set the maximum pages to display.     *     * @param  integer $maxPagesToShow  A number of pages to display.     *     * @return PaginationInterface     *     * @throws \InvalidArgumentException if $maxPagesToShow is less than 3.     *     * @api     */    public function setMaxPagesToShow($maxPagesToShow)    {        if ((int) $maxPagesToShow < 3) {            throw new \InvalidArgumentException('maxPagesToShow cannot be less than 3.');        }        $this->setProperty('maxPagesToShow', (int) $maxPagesToShow);        return $this;    }    /**     * Get the maximum pages to display.     *     * @return integer     *     * @api     */    public function getMaxPagesToShow()    {        return $this->getProperty('maxPagesToShow');    }    /**     * Set the page offset.     *     * @return PaginationInterface     *     * @api     */    public function setPageOffset()    {        ($this->currentPage > $this->pageCount)            ? $this->setProperty('currentPage', static::DEFAULT_PAGE)            : null;        ($this->itemsPerPage < 1)            ? $this->setProperty('itemsPerPage', static::DEFAULT_PAGE)            : null;        $this->setProperty(            'pageOffset',            abs(intval($this->currentPage * $this->itemsPerPage - $this->itemsPerPage))        );        return $this;    }    /**     * Get the page offset.     *     * @return integer     *     * @api     */    public function getPageOffset()    {        return $this->getProperty('pageOffset');    }    /**     * Get the limit per page offset (for SQL LIMIT statement).     *     * @return array     *     * @api     */    public function getLimitPerPageOffset()    {        $this->setPageOffset();        $offset = $this->getProperty('pageOffset');        return [$offset, $this->itemsPerPage];    }    /**     * Set the current page number.     *     * @param  integer $currentPage  A current page number.     *     * @return PaginationInterface     *     * @api     */    public function setCurrentPage($currentPage = null)    {        $currentPage === null            ? null            : $this->setProperty('currentPage', (int) $currentPage);        $this->currentPage > $this->pageCount            ? $this->setProperty('currentPage', static::DEFAULT_PAGE)            : null;        return $this;    }    /**     * Get the current page number.     *     * @return integer     *     * @api     */    public function getCurrentPage()    {        return $this->currentPage > $this->pageCount            ? static::DEFAULT_PAGE            : (int) $this->getProperty('currentPage');    }    /**     * Set the number of items (records) per page.     *     * @param  integer $itemsPerPage  A number of items per page     *     * @return PaginationInterface     *     * @api     */    public function setItemsPerPage($itemsPerPage)    {        $this->setProperty('itemsPerPage', (int) $itemsPerPage);        $this->updateNumPages();        return $this;    }    /**     * Get the number of items (records) per page.     *     * @return integer     *     * @api     */    public function getItemsPerPage()    {        return (int) $this->getProperty('itemsPerPage');    }    /**     * Set the total number of records in total.     *     * @param  integer $totalItems  A number of total records in database     *     * @return PaginationInterface     *     * @api     */    public function setTotalItems($totalItems)    {        $this->setProperty('totalItems', (int) $totalItems);        $this->updateNumPages();        return $this;    }    /**     * Get the number of items in database.     *     * @return integer     *     * @api     */    public function getTotalItems()    {        return (int) $this->getProperty('totalItems');    }    /**     * Get the number of pages.     *     * @return integer     *     * @api     */    public function getNumPages()    {        return (int) $this->getProperty('pageCount');    }    /**     * Set the url pattern for rendering pagination (scheme).     *     * @param  string $urlPattern  A base SEO url pattern     *     * @return PaginationInterface     *     * @api     */    public function setUrlPattern($urlPattern)    {        $this->setProperty('urlPattern', (string) $urlPattern);        return $this;    }    /**     * Get the assigned url pattern.     *     * @return string     *     * @api     */    public function getUrlPattern()    {        return $this->getProperty('urlPattern');    }    /**     * Get the page url.     *     * @param  integer $pageNum  A page number for the url pattern     *     * @return string     *     * @api     */    public function getPageUrl($pageNum)    {        $url = str_replace(self::PAGE_PLACEHOLDER, (int) $pageNum, $this->urlPattern);        $url = $this->isItemsPerPageUsed            ? str_replace(self::ROWS_PLACEHOLDER, (int) $this->itemsPerPage, $url)            : str_replace(self::ROWS_PLACEHOLDER.'/', null, $url);        $url = $this->isSortPatternUsed            ? str_replace(self::SORT_PLACEHOLDER, (string) $this->sortPattern, $url)            : str_replace(self::SORT_PLACEHOLDER.'/', null, $url);        $url = $this->isSearchPatternUsed            ? str_replace(self::SEARCH_PLACEHOLDER, (string) $this->searchPattern, $url)            : str_replace(self::SEARCH_PLACEHOLDER.'/', null, $url);        return $url;    }    /**     * Get the next page number.     *     * @return integer     *     * @api     */    public function getNextPage()    {        return (int) $this->currentPage < (int) $this->pageCount            ? (int) $this->currentPage + 1            : null;    }    /**     * Get the previous page number.     *     * @return integer     *     * @api     */    public function getPrevPage()    {        return (int) $this->currentPage > 1            ? (int) $this->currentPage - 1            : null;    }    /**     * Get the next page url.     *     * @return string|null     *     * @api     */    public function getNextUrl()    {        return $this->getNextPage()            ? $this->getPageUrl($this->getNextPage())            : null;    }    /**     * Get the previous page url.     *     * @return string|null     *     * @api     */    public function getPrevUrl()    {        return $this->getPrevPage()            ? $this->getPageUrl($this->getPrevPage())            : null;    }    /**     * Get pagination via data array.     *     * Example:     * array(     *     array ('num' => 1,     'url' => '/Personnel/page-1/',  'isCurrent' => false),     *     array ('num' => '...', 'url' => null,                  'isCurrent' => false),     *     array ('num' => 3,     'url' => '/Personnel/page-3/',  'isCurrent' => false),     *     array ('num' => 4,     'url' => '/Personnel/page-4/',  'isCurrent' => true ),     *     array ('num' => 5,     'url' => '/Personnel/page-5/',  'isCurrent' => false),     *     array ('num' => '...', 'url' => null,                  'isCurrent' => false),     *     array ('num' => 10,    'url' => '/Personnel/page-10/', 'isCurrent' => false),     * )     *     * @return array     *     * @api     */    public function renderAsArray()    {        $pages = array();        if ((int) $this->pageCount <= 1) {            return array();        }        if ((int) $this->pageCount <= (int) $this->maxPagesToShow) {            for ($i = 1; $i <= (int) $this->pageCount; $i++) {                $pages[] = $this->createPage($i, $i === (int) $this->currentPage);            }        } else {            /** Determine the sliding range, centered around the current page */            $numAdjacents = (int) floor(((int) $this->maxPagesToShow - 3) / 2);            if ((int) $this->currentPage + $numAdjacents > (int) $this->pageCount) {                $slidingStart = (int) $this->pageCount - (int) $this->maxPagesToShow + 2;            } else {                $slidingStart = (int) $this->currentPage - $numAdjacents;            }            if ($slidingStart < 2) $slidingStart = 2;            $slidingEnd = $slidingStart + (int) $this->maxPagesToShow - 3;            if ($slidingEnd >= (int) $this->pageCount) {                $slidingEnd = (int) $this->pageCount - 1;            }            /** Build the list of pages */            $pages[] = $this->createPage(1, (int) $this->currentPage === 1);            if ($slidingStart > 2) {                $pages[] = $this->createPageEllipsis();            }            for ($i = $slidingStart; $i <= $slidingEnd; $i++) {                $pages[] = $this->createPage($i, $i === (int) $this->currentPage);            }            if ($slidingEnd < (int) $this->pageCount - 1) {                $pages[] = $this->createPageEllipsis();            }            $pages[] = $this->createPage((int) $this->pageCount, (int) $this->currentPage === (int) $this->pageCount);        }        return $pages;    }    /**     * Create a page data structure.     *     * @param  integer $pageNum    A page number for data structure     * @param  integer $isCurrent  A boolean if is the current page     *     * @return array     */    protected function createPage($pageNum, $isCurrent = false)    {        return array(            'num' => (int) $pageNum,            'url' => $this->getPageUrl($pageNum),            'isCurrent' => $isCurrent,        );    }    /**     * Create ellipses as a pagination indicator.     *     * @return array     */    protected function createPageEllipsis()    {        return array(            'num' => '...',            'url' => null,            'isCurrent' => false,        );    }    /**     * Render a small HTML pagination control.     *     * @return array     *     * @api     */    public function getSmallHtml()    {        $html = '';        if ((int) $this->getNumPages() > 1) {            $html .= '<div class="" style="width:340px;float:left;margin:0;padding:0;">'."\n";            if ($this->getPrevUrl()) {                $html .= '<span style="float:left;">'."\n";                $html .= '   <a href="'  . str_replace(['"'],['%22'], $this->getPrevUrl()) . '" class="btn btn-default" type="button">&laquo; Prev</a>'."\n";                $html .= '</span>'."\n\n";            } else {                $html .= '<span style="float:left;">'."\n";                $html .= '   <a href="'  . '#' . '" class="btn btn-default" type="button" style="pointer-events: none;">&laquo; Prev</a>'."\n";                $html .= '</span>'."\n\n";            }            $html .= '<select class="form-control paginator-control" style="float:left;width:90px; cursor: pointer; -webkit-appearance: none; -moz-appearance: none; appearance: none;">'."\n";            foreach ($this->renderAsArray() as $page) {                if ($page['url']) {                    $html .= '    <option value="'. str_replace(['"'],['%22'], $page['url']) .'"';                    $html .= $page['isCurrent'] ? ' selected="selected">' : '>' ;                    $html .= 'Page '.  $page['num']  . '</option>'."\n";                } else {                    $html .= '    <option disabled>'.   $page['num']   .     '</option>' ."\n";                }            }            $html .= '</select>'."\n\n";            if ($this->getNextUrl()) {                $html .= '<span style="float:left;">'."\n";                $html .= '   <a href="'  . str_replace(['"'],['%22'], $this->getNextUrl()) . '" class="btn btn-default" type="button">Next &raquo;</a>'."\n";                $html .= '</span>'."\n";            } else {                $html .= '<span style="float:left;">'."\n";                $html .= '   <a href="'  . '#' . '" class="btn btn-default" type="button" style="pointer-events: none;">Next &raquo;</a>'."\n";                $html .= '</span>'."\n";            }            if ($this->isItemsPerPageUsed) {                $html .= '<button class="button secondary" id="button-pagination-show" name="button" type="button" tabindex="4" value="pagination-show" style="float:left;margin:4px 4px 4px 8px;">Show</button>'."\n";                $html .= sprintf('<input class="input-paginator-items-per-page" id="paginator-items-per-page" name="paginator-items-per-page" type="text" maxlength="50" placeholder="##" title="Show records per page" tabindex="1" style="border-radius:4px;border:1px solid #1A87B9;width: 40px;text-align:center;padding:3px;margin:2px 2px 2px 1px;font-size:16px;float:left;" value="%s">', $this->itemsPerPage);            }            $html .= '</div>';        } else {            $html .= '<div class="" style="width:340px;float:left;margin:0;padding:0;">'."\n";            $html .= '<span style="float:left;">'."\n";            $html .= '   <a href="'  . '#' . '" class="btn btn-default" type="button" style="pointer-events: none;">&laquo; Prev</a>'."\n";            $html .= '</span>'."\n\n";            $html .= '<select class="form-control paginator-control" style="float:left;width:90px; cursor: pointer; -webkit-appearance: none; -moz-appearance: none; appearance: none;">'."\n";            $html .= '    <option value="'. str_replace(['"'],['%22'], $this->getPageUrl(1)) .' selected="selected">Page 1</option>'."\n";            $html .= '</select>'."\n\n";            $html .= '<span style="float:left;">'."\n";            $html .= '   <a href="'  . '#' . '" class="btn btn-default" type="button" style="pointer-events: none;">Next &raquo;</a>'."\n";            $html .= '</span>'."\n";            if ($this->isItemsPerPageUsed) {                $html .= '<button class="button secondary" id="button-pagination-show" name="button" type="button" tabindex="4" value="pagination-show" style="float:left;margin:4px 4px 4px 8px;">Show</button>'."\n";                $html .= sprintf('<input class="input-paginator-items-per-page" id="paginator-items-per-page" name="paginator-items-per-page" type="text" maxlength="50" placeholder="##" title="Show records per page" tabindex="1" style="border-radius:4px;border:1px solid #1A87B9;width: 40px;text-align:center;padding:3px;margin:2px 2px 2px 1px;font-size:16px;float:left;" value="%s">', $this->itemsPerPage);            }            $html .= '</div>';        }        // add comment that jQuery pagination in /sso/1/assets/js/vendor/ucsdmath-functions.min.js        return $html;    }    /**     * Render a long HTML pagination control.     *     * @return array     *     * @api     */    public function getDefaultHtml()    {        if ((int) $this->pageCount <= 1) {            return '';        }        $html = '<ul class="pagination">'."\n";        if ($this->getPrevUrl()) {            $html .= '<li><a href="'.$this->getPrevUrl().'">&laquo; Previous</a></li>'."\n";        }        foreach ($this->renderAsArray() as $page) {            if ($page['url']) {                $html .= '<li'.($page['isCurrent'] ? ' class="active"' : '').'><a href="'.$page['url'].'">'.$page['num'].'</a></li>'."\n";            } else {                $html .= '<li class="disabled"><span>'.$page['num'].'</span></li>'."\n";            }        }        if ($this->getNextUrl()) {            $html .= '<li><a href="'.$this->getNextUrl().'">Next &raquo;</a></li>'."\n";        }        $html .= '</ul>'."\n";        return $html;    }    /**     * Default string out through object.     *     * @return string     *     * @api     */    public function __toString()    {        return $this->getSmallHtml();    }    /**     * Get the next page number.     *     * @return integer     *     * @api     */    public function getCurrentPageFirstItem()    {        $first = ((int) $this->currentPage - 1) * (int) $this->itemsPerPage + 1;        return $first > (int) $this->totalItems            ? null            : $first;    }    /**     * Get the last item for the current page.     *     * @return integer     *     * @api     */    public function getCurrentPageLastItem()    {        $first = $this->getCurrentPageFirstItem();        if ($first === null) {            return null;        }        $last = $first + (int) $this->itemsPerPage - 1;        return ($last > (int) $this->totalItems)            ? (int) $this->totalItems            : $last;    }    /**     * Return a json encoded data of the pagination data structure.     *     * @param  integer $options  A bitmask option for the encoder     *     * @return string     *     * @api     */    public function renderAsJson($options = 0)    {        return json_encode($this->renderAsArray(), $options);    }    /**     * Method implementations inserted.     *     * The notation below illustrates visibility: (+) @api, (-) protected or private.     *     * @see (+) all();     * @see (+) init();     * @see (+) get($key);     * @see (+) has($key);     * @see (+) version();     * @see (+) getClassName();     * @see (+) getConst($key);     * @see (+) set($key, $value);     * @see (+) isString($string);     * @see (+) getInstanceCount();     * @see (+) getClassInterfaces();     * @see (+) getProperty($name, $key = null);     * @see (-) doesFunctionExist($functionName);     * @see (+) isStringKey($string, array $keys);     * @see (-) throwExceptionError(array $error);     * @see (+) setProperty($name, $value, $key = null);     * @see (-) throwInvalidArgumentExceptionError(array $error);     */    use ServiceFunctions;}